using System;
using System.Linq;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Runtime.Serialization;
namespace Cabinink.Writer.Cores
{
   /// <summary>
   /// 作品信息结构体
   /// </summary>
   public struct SNovelInformation
   {
      /// <summary>
      /// 作品名称，这个名称是用于作品的正式名称或者发布名称
      /// </summary>
      public string NovelName;
      /// <summary>
      /// 作者名称，一般而言，作者名称指的是作者的笔名，而非真实姓名
      /// </summary>
      public string WriterName;
      /// <summary>
      /// 作品的备注信息，比如说这里可以填写作品概要
      /// </summary>
      public string Remarks;
      /// <summary>
      /// 作品的内容分类，这个通常按照内容题材来分类的， 比如说科幻、推理和修真等等
      /// </summary>
      public ENovelCategory Category;
      /// <summary>
      /// 本作品开始创作的时间，这个时间包含了日期和当天的详细时间，精确到秒，当然一般不建议使用详细时间
      /// </summary>
      public DateTime CreationTime;
      /// <summary>
      /// 本作品结束创作或者完结的时间，这个时间包含了日期和当天的详细时间，精确到秒，当然一般不建议使用详细时间
      /// </summary>
      public DateTime BreakupTime;
      /// <summary>
      /// 该作品的相关关键词，这些关键词可以大致的说明这部作品描述的内容是与什么事物产生关联
      /// </summary>
      public List<string> Keywords;
      /// <summary>
      /// 资源文件列表，这里的资源文件主要指的是作品策划、数据资料、重要笔记等等
      /// </summary>
      public List<string> ResourceFiles;
      /// <summary>
      /// 构造函数，创建一个拥有作品名称、作者笔名、详细摘要、创作时间和资源列表的作品信息结构体
      /// </summary>
      /// <param name="_nvlname">指定的作品名称。</param>
      /// <param name="_wrtname">指定的作者笔名。</param>
      /// <param name="_remarks">指定的作品摘要。</param>
      /// <param name="_category">指定的作品分类。</param>
      /// <param name="_stime">指定的创作时间。</param>
      /// <param name="_kw">指定的关键词。</param>
      /// <param name="_resf">指定的资源列表。</param>
      public SNovelInformation(string _nvlname, string _wrtname, string _remarks, ENovelCategory _category, DateTime _ctime, DateTime _btime, List<string> _kw, List<string> _resf)
      {
         NovelName = _nvlname;
         WriterName = _wrtname;
         Remarks = _remarks;
         Category = _category;
         CreationTime = _ctime;
         BreakupTime = _btime;
         Keywords = _kw;
         ResourceFiles = _resf;
      }
   }
   /// <summary>
   /// 作品表示类
   /// </summary>
   /// <typeparam name="TEmbroilNumber">分卷编号的编号数据类型。</typeparam>
   /// <typeparam name="TChapterNumber">章节编号的编号数据类型。</typeparam>
   [DebuggerDisplay("Count = {Count}")]
   public class Novel<TEmbroilNumber, TChapterNumber> : IBuilder, ICharacterWhatpulse
   {
      /// <summary>
      /// 当前作品的作品信息
      /// </summary>
      private SNovelInformation information;
      /// <summary>
      /// 分卷列表
      /// </summary>
      private List<Embroil<TEmbroilNumber, TChapterNumber>> embroils;
      /// <summary>
      /// 构造函数，创建一个只存在作品信息的空作品
      /// </summary>
      /// <param name="_info">指定的作品信息。</param>
      public Novel(SNovelInformation _info)
      {
         information = _info;
         embroils = new List<Embroil<TEmbroilNumber, TChapterNumber>>();
      }
      /// <summary>
      /// 构造函数，创建一个包含作品信息和分卷列表的作品
      /// </summary>
      /// <param name="_info">指定的作品信息。</param>
      /// <param name="_embroils">指定的分卷列表。</param>
      public Novel(SNovelInformation _info, List<Embroil<TEmbroilNumber, TChapterNumber>> _embroils)
      {
         information = _info;
         embroils = _embroils;
      }
      /// <summary>
      /// 获取或者设置作品的信息
      /// </summary>
      public SNovelInformation Information
      {
         get { return information; }
         set
         {
            bool eql_info_nvlname = information.NovelName == string.Empty;
            bool eql_info_wrtname = information.WriterName == string.Empty;
            bool eql_info_remarks = information.Remarks == string.Empty;
            bool eql_info_srttime = information.CreationTime == null;
            bool eql_info_reslist = false;
            Parallel.For(
               0,
               information.ResourceFiles.Count,
               (index, interrupt) =>
               {
                  if (information.ResourceFiles[index] == null)
                  {
                     eql_info_reslist = true;
                     interrupt.Stop();
                  }
               }
            );
            if ((eql_info_nvlname && eql_info_wrtname && eql_info_remarks && eql_info_srttime && eql_info_reslist) == false)
            {
               throw new InformationNotEqualException("信息不能为空！");
            }
            information = value;
         }
      }
      /// <summary>
      /// 获取或设置当前作品的分卷列表
      /// </summary>
      public List<Embroil<TEmbroilNumber, TChapterNumber>> Embroils
      {
         get { return embroils; }
         set { embroils = value; }
      }
      /// <summary>
      /// 获取或设置当前作品的某一分卷
      /// </summary>
      /// <param name="_index">需要获取指定分卷的索引。</param>
      /// <returns>如果指定的索引没有超出范围，那么该操作将会返回一个指定索引所对应的那个分卷。</returns>
      public Embroil<TEmbroilNumber, TChapterNumber> this[int _index]
      {
         get
         {
            if (_index < 0 || _index > Count) throw new ArgumentOutOfRangeException("索引超出范围！");
            return Embroils[_index];
         }
         set
         {
            if (_index < 0 || _index > Count) throw new ArgumentOutOfRangeException("索引超出范围！");
            Embroils[_index] = value;
         }
      }
      /// <summary>
      /// 获取当前作品的分卷总量
      /// </summary>
      public int Count
      {
         get { return Embroils.Count(); }
      }
      /// <summary>
      /// 获取当前层级正文的所有字符的数量
      /// </summary>
      public uint CharacterCount
      {
         get
         {
            uint ccnt = 0;
            for (short i = 0; i < Count; i++) ccnt += this[i].CharacterCount;
            return ccnt;
         }
      }
      /// <summary>
      /// 获取当前层级正文的所有标点符号的数量
      /// </summary>
      public uint PunctuationCount
      {
         get
         {
            uint pcnt = 0;
            for (short i = 0; i < Count; i++) pcnt += this[i].CharacterCount;
            return pcnt;
         }
      }
      /// <summary>
      /// 获取当前层级正文的所有单词或者汉字的数量
      /// </summary>
      public uint WordCount
      {
         get
         {
            return CharacterCount - PunctuationCount;
         }
      }
      /// <summary>
      /// 添加新的分卷
      /// </summary>
      /// <param name="_item">需要被添加到作品里面的分卷。</param>
      /// <returns>这个操作会返回一个整数值，这个整数值表示执行该操作之后的分卷总数。</returns>
      public int AddEmbroil(Embroil<TEmbroilNumber, TChapterNumber> _item)
      {
         Embroils.Add(_item);
         return Count;
      }
      /// <summary>
      /// 添加新的分卷到指定位置
      /// </summary>
      /// <param name="_item">需要被添加到作品里面的分卷。</param>
      /// <param name="_index">用于添加到指定位置所对应的索引。</param>
      /// <returns>这个操作会返回一个整数值，这个整数值表示执行该操作之后的分卷总数。</returns>
      public int AddEmbroil(Embroil<TEmbroilNumber, TChapterNumber> _item, int _index)
      {
         Embroils.Insert(_index, _item);
         return Count;
      }
      /// <summary>
      /// 添加新的分卷到指定分卷后面
      /// </summary>
      /// <param name="_item">需要被添加到作品里面的分卷。</param>
      /// <param name="_embrno">指示添加到哪一个分卷后面。</param>
      /// <returns>这个操作会返回一个整数值，这个整数值表示执行该操作之后的分卷总数。</returns>
      public int AddEmbroil(Embroil<TEmbroilNumber, TChapterNumber> _item, SEmbroilNumber<TEmbroilNumber> _embrno)
      {
         AddEmbroil(_item, GetEmbroilIndex(_embrno));
         return Count;
      }
      /// <summary>
      /// 移除指定的分卷
      /// </summary>
      /// <param name="_embrno">需要被移除的分卷的分卷编号。</param>
      public void RemoveEmbroil(SEmbroilNumber<TEmbroilNumber> _embrno)
      {
         Embroils.RemoveAt(GetEmbroilIndex(_embrno));
      }
      /// <summary>
      /// 获取指定分卷编号在列表中的索引
      /// </summary>
      /// <param name="_embrno">需要用于获取索引的分卷编号。</param>
      /// <returns>如果这个分卷编号存在则会返回一个正确的索引，否则会抛出异常。</returns>
      public int GetEmbroilIndex(SEmbroilNumber<TEmbroilNumber> _embrno)
      {
         int r_index = -1;
         bool eql_embrno_no = false;
         bool eql_embrno_mode = false;
         bool isstoped = false;
         Parallel.For(0, Count, (index, interrupt) =>
         {
            eql_embrno_no = _embrno.EmbroilNumber.ToString() == this[index].EmbroilNumber.EmbroilNumber.ToString();
            eql_embrno_mode = _embrno.EmbroilNumberMode == this[index].EmbroilNumber.EmbroilNumberMode;
            if (eql_embrno_no && eql_embrno_mode)
            {
               r_index = index;
               interrupt.Stop();
            }
            isstoped = interrupt.IsStopped;
         });
         if (isstoped == false) throw new NotFoundEmbroilException("找不到该分卷！");
         return r_index;
      }
      /// <summary>
      /// 检查指定的分卷编号是否存在于列表之中
      /// </summary>
      /// <param name="_embrno">需要被用于检查的分卷编号。</param>
      /// <returns>如果这个分卷编号存在则会返回true，否则会返回false。</returns>
      public bool EmbroilExists(SEmbroilNumber<TEmbroilNumber> _embrno)
      {
         bool exists = true;
         try
         {
            GetEmbroilIndex(_embrno);
         }
         catch (NotFoundEmbroilException ex)
         {
            if (ex != null) exists = false;
         }
         return exists;
      }
      /// <summary>
      /// 打开指定的资源
      /// </summary>
      /// <param name="_resurl">指定资源的文件路径。</param>
      /// <param name="_arguments">打开资源文件所使用的应用程序的参数，如果没有参数，这一项可以设置为null或者为String.Empty。</param>
      /// <returns>如果这个资源成功的被打开，则会返回打开该资源文件的应用程序的进程实例。</returns>
      public Process OpenResource(string _resurl, string _arguments)
      {
         return Process.Start(_resurl, _arguments);
      }
      /// <summary>
      /// 打开指定的资源
      /// </summary>
      /// <param name="_index">指定资源在资源列表中的索引。</param>
      /// <param name="_arguments">打开资源文件所使用的应用程序的参数，如果没有参数，这一项可以设置为null或者为String.Empty。</param>
      /// <returns>如果这个资源成功的被打开，则会返回打开该资源文件的应用程序的进程实例。</returns>
      public Process OpenResource(int _index, string _arguments)
      {
         if (_index > Information.ResourceFiles.Count || _index < 0) throw new ArgumentOutOfRangeException("索引超出范围！");
         return OpenResource(Information.ResourceFiles[_index], _arguments);
      }
      /// <summary>
      /// 添加资源文件到资源列表中
      /// </summary>
      /// <param name="_resurl">需要被添加到列表之中的资源文件的路径。</param>
      /// <param name="_index">指示添加到列表的哪一个元素后面。</param>
      public void AddResource(string _resurl, int _index)
      {
         if (_index > Information.ResourceFiles.Count || _index < 0) throw new ArgumentOutOfRangeException("索引超出范围！");
         Information.ResourceFiles.Insert(_index, _resurl);
      }
      /// <summary>
      /// 添加一个资源集合到资源列表中与之合并
      /// </summary>
      /// <param name="_resurlccx">需要被添加进原资源列表的资源集合。</param>
      /// <param name="_index">指示添加到列表的哪一个元素后面。</param>
      public void AddResourceCollection(List<string> _resurlccx, int _index)
      {
         if (_index > Information.ResourceFiles.Count || _index < 0) throw new ArgumentOutOfRangeException("索引超出范围！");
         Information.ResourceFiles.InsertRange(_index, _resurlccx);
      }
      /// <summary>
      /// 移除指定索引所对应的资源
      /// </summary>
      /// <param name="_index">指定的索引。</param>
      public void RemoveResource(int _index)
      {
         if (_index > Information.ResourceFiles.Count || _index < 0) throw new ArgumentOutOfRangeException("索引超出范围！");
         Information.ResourceFiles.RemoveAt(_index);
      }
      /// <summary>
      /// 移除全字匹配字符串的资源文件
      /// </summary>
      /// <param name="_resurl">需要进行全字匹配的资源文件路径。</param>
      /// <param name="_isrmvalleqlst">指示是否移除所有满足条件的字符串，如果这个参数为true，则会移除所有满足条件的资源文件，否则只是移除匹配到的第一个满足条件的资源文件。</param>
      public void RemoveResource(string _resurl, bool _isrmvalleqlst)
      {
         int maxloop = GetResourceListCount();
         if (_isrmvalleqlst == false)
         {
            for (int i = 0; i < maxloop; i++)
            {
               if (_resurl == Information.ResourceFiles[i])
               {
                  Information.ResourceFiles.RemoveAt(i);
                  break;
               }
            }
         }
         else
         {
            Parallel.For(0, maxloop, (index) =>
            {
               if (_resurl == Information.ResourceFiles[index]) Information.ResourceFiles.RemoveAt(index);
            });
         }
      }
      /// <summary>
      /// 获取资源列表的元素数量
      /// </summary>
      /// <returns>该操作会返回一个整形数据，用于表示资源列表的所有元素的数量。</returns>
      public int GetResourceListCount()
      {
         return Information.ResourceFiles.Count;
      }
      /// <summary>
      /// 在当前的作品层级组建并生成用户能够直接使用的文本
      /// </summary>
      /// <param name="_iselinttl">是否在标题结尾追加空行。</param>
      /// <param name="_iselinend">是否在正文结尾追加空行。</param>
      /// <returns>该操作会返回一个可以供普通用户使用并阅读的文本，这些文本则是可以发表的作品内容的一部分或者全部内容。</returns>
      public string Build(bool _iselinttl, bool _iselinend)
      {
         string eptline = "\n";
         string build_st = _iselinttl ? Information.NovelName + eptline : Information.NovelName;
         for (int i = 0; i < Count; i++) build_st += this[i].Build(_iselinttl, _iselinend);
         if (_iselinend) build_st += eptline;
         return build_st;
      }
      /// <summary>
      /// 获取当前Novel实例的完整类名的字符串表达形式
      /// </summary>
      /// <returns>该操作会返回一个当前实例的完整类名的字符串表达形式。</returns>
      public override string ToString()
      {
         return "Cabinink.Writer.Cores.Novel";
      }
   }
   /// <summary>
   /// 作品内容分类的枚举
   /// </summary>
   public enum ENovelCategory : int
   {
      /// <summary>
      /// 玄幻
      /// </summary>
      Unreal = 0x0001,
      /// <summary>
      /// 都市
      /// </summary>
      Metropolis = 0x0002,
      /// <summary>
      /// 修真
      /// </summary>
      Coatard = 0x0003,
      /// <summary>
      /// 武侠
      /// </summary>
      Swordsmen = 0x0004,
      /// <summary>
      /// 军事
      /// </summary>
      Military = 0x0005,
      /// <summary>
      /// 历史
      /// </summary>
      History = 0x0006,
      /// <summary>
      /// 网游
      /// </summary>
      OnlineGames = 0x0007,
      /// <summary>
      /// 科幻
      /// </summary>
      ScienceFiction = 0x0008,
      /// <summary>
      /// 竞技
      /// </summary>
      Athletics = 0x0009,
      /// <summary>
      /// 体育
      /// </summary>
      PhysicalEducation = 0x000a,
      /// <summary>
      /// 灵异
      /// </summary>
      Supernatural = 0x000b,
      /// <summary>
      /// 推理
      /// </summary>
      Deduction = 0x000c,
      /// <summary>
      /// 同人
      /// </summary>
      SamePerson = 0x000d,
      /// <summary>
      /// 恐怖
      /// </summary>
      Horror = 0x000e,
      /// <summary>
      /// 穿越
      /// </summary>
      TimeTravel = 0x000f,
      /// <summary>
      /// 其他
      /// </summary>
      Other = 0x0010
   }
   /// <summary>
   /// 当作品信息不相等时抛出的异常
   /// </summary>
   [Serializable]
   public class InformationNotEqualException : Exception
   {
      public InformationNotEqualException() { }
      public InformationNotEqualException(string message) : base(message) { }
      public InformationNotEqualException(string message, Exception inner) : base(message, inner) { }
      protected InformationNotEqualException(SerializationInfo info, StreamingContext context) : base(info, context) { }
   }
}
